import java.awt.*;       // Using AWT's Graphics and Color
import java.awt.event.*; // Using AWT's event classes and listener interfaces
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.swing.*;    // Using Swing's components and container
import javax.imageio.ImageIO; 
/** 
 * A Bouncing Ball: Running animation via Swing Timer 
 */
@SuppressWarnings("serial")
public class FinalProject extends JFrame {
   // Define named-constants
   private static final int CANVAS_WIDTH = 640;
   private static final int CANVAS_HEIGHT = 480;
   private static final int UPDATE_PERIOD = 1; // milliseconds
 
   private DrawCanvas canvas;  // the drawing canvas (an inner class extends JPanel)
 
   // Attributes of moving object
   private int x = 0, y = 100;  // top-left (x, y)
   private int xSpeed = 0, ySpeed = 10; // displacement per step in x, y
   
   // Second Moving Object
   private int x2 = 60, y2 = 200;
   private int sizex1 = 50;
   private int sizey1 = 50;
   private int x2Speed = 2, y2Speed = 2;
   // Constructor to setup the GUI components and event handlers
   public FinalProject() {
      canvas = new DrawCanvas();
      canvas.setPreferredSize(new Dimension(CANVAS_WIDTH, CANVAS_HEIGHT));
      this.setContentPane(canvas);
      this.setDefaultCloseOperation(EXIT_ON_CLOSE);
      this.pack();
      this.setTitle("Bouncing Ball");
      this.setVisible(true);
 
      // Define an ActionListener to perform update at regular interval
      ActionListener updateTask = new ActionListener() {
         @Override
         public void actionPerformed(ActionEvent evt) {
            update();   // update the (x, y) position
            repaint();  // Refresh the JFrame, callback paintComponent()
         }
      };
      // Allocate a Timer to run updateTask's actionPerformed() after every delay msec
      new Timer(UPDATE_PERIOD, updateTask).start();
   }
 
   // Update the (x, y) position of the moving object
   public void update() {
     
		//all i want to do rihght now in update the dudes position up and down, not left and right do you understand ocmputer
      x += xSpeed;
      y += ySpeed;
      if (x > CANVAS_WIDTH - sizex1 || x < 0) {
         xSpeed = -xSpeed;
      }
      if (y > CANVAS_HEIGHT - sizey1 || y < 0) {
         ySpeed = -ySpeed;
		}
		//if()	
   }
 
 
   // Define inner class DrawCanvas, which is a JPanel used for custom drawing
   private class DrawCanvas extends JPanel {
      @Override
      public void paintComponent(Graphics g) {
     BufferedImage dbImage = null;
try {
dbImage = ImageIO.read(new File("beuty.jpg"));
} catch (IOException e) {
// TODO Auto-generated catch block
e.printStackTrace();
}

 BufferedImage dbImage1 = null;
try {
dbImage1 = ImageIO.read(new File("bird.png"));
} catch (IOException e) {
// TODO Auto-generated catch block
e.printStackTrace();
}

 BufferedImage dbImage2 = null;
try {
dbImage2 = ImageIO.read(new File("5a058e3e9cf05203c4b60401.png"));
} catch (IOException e) {
// TODO Auto-generated catch block
e.printStackTrace();
}
         super.paintComponent(g);  // paint parent's background
         g.drawImage(dbImage, 0, 0, getWidth(), getHeight(), this);
         g.drawImage(dbImage1, x, y, sizex1, sizey1, this);
         g.drawImage(dbImage2, 250, 0, getWidth()-550, getHeight()-350, this);

           
         
         //g.fillOval(x, y, 15, 15);
        // g.setColor(Color.BLUE);
       //  g.fillRect(x, y, size, size);  // draw a circle
        // g.setColor(Color.GREEN);
        // g.fillRect(x2, y2, size2, size2);  // draw a circle
         
      }
   }
 
   // The entry main method
   public static void main(String[] args) {
      // Run GUI codes in Event-Dispatching thread for thread safety
      SwingUtilities.invokeLater(new Runnable() {
         @Override
         public void run() {
            new FinalProject(); // Let the constructor do the job
         }
      });
   }
}
